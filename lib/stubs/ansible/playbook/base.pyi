from __future__ import annotations

from typing import Any, ClassVar, Mapping, Sequence, TypeVar, Union

from ansible.parsing.dataloader import DataLoader
from ansible.parsing.yaml.objects import AnsibleMapping, AnsibleSequence, AnsibleUnicode
from ansible.vars.manager import VariableManager

Scalar = Union[AnsibleUnicode, int, bool, float, None]
Value = Union[Scalar, AnsibleSequence, AnsibleMapping]

SelfType = TypeVar("SelfType", bound=Base)

class FieldAttribute:
    isa: str
    alias: str

class FieldAttributeBase:
    fattributes: ClassVar[Mapping[str, FieldAttribute]]
    def dump_attrs(self) -> Mapping[str, object]: ...
    def get_validated_value(
        self, name: str, attribute: FieldAttribute, value: object, templar: object
    ) -> object: ...
    def get_ds(self) -> Any: ...

class Base(FieldAttributeBase):
    name: str = ...
    connection: str = ...
    port: int = ...
    remote_user: str = ...
    vars: dict[str, Value] = ...
    module_defaults: Sequence[object] = ...
    environment: Sequence[object] = ...
    no_log: bool = ...
    run_once: bool = ...
    ignore_errors: bool = ...
    ignore_unreachable: bool = ...
    check_mode: bool = ...
    diff: bool = ...
    any_errors_fatal: bool = ...
    throttle: int = ...
    debugger: str = ...
    become: bool | str = ...
    become_method: str = ...
    become_user: str = ...
    become_flags: str = ...
    become_exe: str = ...

    def load_data(
        self: SelfType,
        ds: dict[str, Value],
        variable_manager: VariableManager | None = ...,
        loader: DataLoader | None = ...,
    ) -> SelfType: ...
