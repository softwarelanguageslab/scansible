from __future__ import annotations

from typing import Any, Sequence

from ansible.parsing.dataloader import DataLoader
from ansible.playbook.base import Base, Value
from ansible.playbook.block import Block
from ansible.playbook.collectionsearch import CollectionSearch
from ansible.playbook.conditional import Conditional
from ansible.playbook.loop_control import LoopControl
from ansible.playbook.role import Role
from ansible.playbook.taggable import Taggable
from ansible.playbook.task_include import TaskInclude
from ansible.vars.manager import VariableManager

class Task(Base, Conditional, Taggable, CollectionSearch):
    args: dict[str, Value] = ...
    action: str = ...
    async_val: int = ...
    changed_when: Sequence[str] = ...
    delay: int = ...
    delegate_to: str = ...
    delegate_facts: bool = ...
    failed_when: Sequence[str] = ...
    loop: Any = ...
    loop_control: LoopControl = ...
    notify: Sequence[str] = ...
    poll: int = ...
    register: str = ...
    retries: int = ...
    until: Sequence[str] = ...
    loop_with: str | None = ...
    role: Role = ...
    parent: Block = ...
    def get_path(self) -> str: ...
    def get_name(self, include_role_fqcn: bool = ...) -> str: ...
    @staticmethod
    def load(
        data: dict[str, Value],
        block: Block | None = ...,
        role: Role | None = ...,
        task_include: TaskInclude | None = ...,
        variable_manager: VariableManager | None = ...,
        loader: DataLoader | None = ...,
    ) -> Task: ...
