from typing import Any, Optional, BinaryIO, List, Iterator, Tuple, Union, IO, Dict, overload, Literal
from pathlib import Path
from subprocess import Popen

_Path = Union[str, Path]

from .util import LazyMixin

class Git(LazyMixin):
    git_exec_name: str = ...
    GIT_PYTHON_TRACE: bool = ...
    USE_SHELL: bool = ...
    GIT_PYTHON_GIT_EXECUTABLE: _Path = ...
    @classmethod
    def refresh(cls, path: Optional[_Path] = ...) -> bool: ...
    @classmethod
    def is_cygwin(cls) -> bool: ...
    @classmethod
    def polish_url(cls, url: str, is_cygwin: Optional[bool] = ...) -> str: ...
    class AutoInterrupt:
        proc: Popen[str] = ...
        args: Union[str, List[str]] = ...
        def __init__(self, proc: Popen[str], args: Union[str, List[str]]) -> None: ...
        def __del__(self) -> None: ...
        def __getattr__(self, attr: str) -> Any: ...
        def wait(self, stderr: bytes = ...) -> int: ...
    class CatFileContentStream():
        def __init__(self, size: int, stream: BinaryIO) -> None: ...
        def read(self, size: int = ...) -> bytes: ...
        def readline(self, size: int = ...) -> bytes: ...
        def readlines(self, size: int = ...) -> List[bytes]: ...
        def __iter__(self) -> Iterator[bytes]: ...
        def next(self) -> bytes: ...
        def __del__(self) -> None: ...
    cat_file_header: Any = ...
    cat_file_all: Any = ...
    def __init__(self, working_dir: Optional[Any] = ...) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def set_persistent_git_options(self, **kwargs: Any) -> None: ...
    @property
    def working_dir(self) -> str: ...
    @property
    def version_info(self) -> Tuple[int, int, int, int]: ...
    @overload
    def execute(self, command: Union[str, List[str]], istream: IO[Any] = ..., with_extended_output: Literal[False] = False, with_exceptions: bool = ..., as_process: bool = ..., output_stream: Optional[IO[Any]] = ..., stdout_as_string: bool = ..., kill_after_timeout: Optional[int] = ..., with_stdout: bool = ..., universal_newlines: bool = ..., shell: Optional[bool] = ..., env: Optional[Dict[str, str]] = ..., max_chunk_size: int = ..., **subprocess_kwargs: Any) -> str: ...  # type: ignore[misc]
    @overload
    def execute(self, command: Union[str, List[str]], istream: IO[Any] = ..., with_extended_output: Literal[True] = True, with_exceptions: bool = ..., as_process: bool = ..., output_stream: Optional[IO[Any]] = ..., stdout_as_string: bool = ..., kill_after_timeout: Optional[int] = ..., with_stdout: bool = ..., universal_newlines: bool = ..., shell: Optional[bool] = ..., env: Optional[Dict[str, str]] = ..., max_chunk_size: int = ..., **subprocess_kwargs: Any) -> Tuple[int, str, str]: ...
    def environment(self) -> Dict[str, str]: ...
    def update_environment(self, **kwargs: Union[str, bool, None]) -> Dict[str, str]: ...
    def custom_environment(self, **kwargs: Union[str, bool, None]) -> None: ...
    def transform_kwarg(self, name: str, value: Union[str, bool, None], split_single_char_options: bool) -> List[str]: ...
    def transform_kwargs(self, split_single_char_options: bool = ..., **kwargs: Union[str, bool, None]) -> List[str]: ...
    def __call__(self, **kwargs: Union[str, bool, None]) -> Git: ...
    def get_object_header(self, ref: Union[str, bytes]) -> Tuple[str, str, int]: ...
    def get_object_data(self, ref: Union[str, bytes]) -> Tuple[str, str, int, bytes]: ...
    def stream_object_data(self, ref: Union[str, bytes]) -> Tuple[str, str, int, Git.CatFileContentStream]: ...
    def clear_cache(self) -> Git: ...
