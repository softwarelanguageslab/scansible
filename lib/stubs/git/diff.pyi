from typing import Any, Optional, Sequence, Union, List, Tuple, Literal, Iterator, Pattern

# from .objects.blob import Blob
Repo = Any # from .repo import Repo

NULL_TREE: object

class Diffable:
    class Index: ...
    def diff(self, other: Any = ..., paths: Union[str, Sequence[str], None] = ..., create_patch: bool = ..., **kwargs: Any) -> DiffIndex: ...

_ChangeType = Literal['A', 'C', 'D', 'R', 'M', 'T']

class DiffIndex(List[Diff]):
    change_type: Tuple[_ChangeType, ...] = ...
    def iter_change_type(self, change_type: _ChangeType) -> Iterator[Diff]: ...

class Diff:
    re_header: Pattern[str] = ...
    NULL_HEX_SHA: str = ...
    NULL_BIN_SHA: bytes = ...
    a_mode: Union[int, Literal['']] = ...
    b_mode: Union[int, Literal['']] = ...
    a_rawpath: Optional[bytes] = ...
    b_rawpath: Optional[bytes] = ...
    a_blob: Optional[Any] = ...
    b_blob: Optional[Any] = ...
    new_file: bool = ...
    deleted_file: bool = ...
    copied_file: bool = ...
    raw_rename_from: Optional[bytes] = ...
    raw_rename_to: Optional[bytes] = ...
    diff: Optional[str] = ...
    change_type: _ChangeType = ...
    score: Optional[int] = ...
    def __init__(self, repo: Repo, a_rawpath: Optional[bytes], b_rawpath: Optional[bytes], a_blob_id: Optional[str], b_blob_id: Optional[str], a_mode: str, b_mode: str, new_file: bool, deleted_file: bool, copied_file: bool, raw_rename_from: Optional[bytes], raw_rename_to: Optional[bytes], diff: Optional[str], change_type: _ChangeType, score: Optional[int]) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def a_path(self) -> Optional[str]: ...
    @property
    def b_path(self) -> Optional[str]: ...
    @property
    def rename_from(self) -> Optional[str]: ...
    @property
    def rename_to(self) -> Optional[str]: ...
    @property
    def renamed(self) -> bool: ...
    @property
    def renamed_file(self) -> bool: ...
