from typing import Any, Optional, Union, BinaryIO, Tuple

from ..util import LazyMixin
Repo = Any # from ..repo import Repo
from ..refs.reference import Reference

class Object(LazyMixin):
    NULL_HEX_SHA: str = ...
    NULL_BIN_SHA: bytes = ...
    TYPES: Tuple[Any, ...] = ...
    type: str = ...
    repo: Repo = ...
    binsha: bytes = ...
    def __init__(self, repo: Repo, binsha: bytes) -> None: ...
    @classmethod
    def new(cls, repo: Repo, id: Union[Reference, str]) -> Object: ...
    @classmethod
    def new_from_sha(cls, repo: Repo, sha1: bytes) -> Object: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def hexsha(self) -> str: ...
    @property
    def data_stream(self) -> BinaryIO: ...
    def stream_data(self, ostream: BinaryIO) -> Object: ...
