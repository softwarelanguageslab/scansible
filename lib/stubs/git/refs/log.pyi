from ..objects.util import Serializable
from .symbolic import SymbolicReference
from ..util import Actor
from ..config import GitConfigParser
from typing import Any, Optional, Tuple, List, TextIO, Iterator, Union

class RefLogEntry(Tuple[str, str, Actor, Tuple[int, int], str]):
    def format(self) -> str: ...
    @property
    def oldhexsha(self) -> str: ...
    @property
    def newhexsha(self) -> str: ...
    @property
    def actor(self) -> Actor: ...
    @property
    def time(self) -> Tuple[int, int]: ...
    @property
    def message(self) -> str: ...
    @classmethod
    def new(cls, oldhexsha: str, newhexsha: str, actor: Actor, time: int, tz_offset: int, message: str) -> RefLogEntry: ...
    @classmethod
    def from_line(cls, line: str) -> RefLogEntry: ...

class RefLog(List[RefLogEntry], Serializable):
    def __new__(cls, filepath: Optional[str] = ...) -> RefLog: ...
    def __init__(self, filepath: Optional[str] = ...) -> None: ...
    @classmethod
    def from_file(cls, filepath: str) -> RefLog: ...
    @classmethod
    def path(cls, ref: SymbolicReference) -> str: ...
    @classmethod
    def iter_entries(cls, stream: Union[TextIO, str]) -> Iterator[RefLogEntry]: ...
    @classmethod
    def entry_at(cls, filepath: str, index: int) -> RefLogEntry: ...
    def to_file(self, filepath: str) -> None: ...
    @classmethod
    def append_entry(cls, config_reader: GitConfigParser, filepath: str, oldbinsha: bytes, newbinsha: bytes, message: str) -> RefLogEntry: ...
    def write(self) -> RefLog: ...
