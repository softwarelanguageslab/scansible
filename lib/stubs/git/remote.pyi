from typing import Any, Optional, Union, Literal, Iterator, List, Callable

Repo = Any #from .repo import Repo
from .config import GitConfigParser
from .refs.reference import Reference
from .refs.symbolic import SymbolicReference
from .refs.remote import RemoteReference
from .refs.tag import TagReference
from .objects.commit import Commit
from .objects.base import Object
from .util import Iterable, LazyMixin, RemoteProgress as RemoteProgress, IterableList

_ProgressReporter = Union[RemoteProgress, Callable[[int, int, Optional[int], str], None], None]

class PushInfo:
    NEW_TAG: int = ...
    NEW_HEAD: int = ...
    NO_MATCH: int = ...
    REJECTED: int = ...
    REMOTE_REJECTED: int = ...
    REMOTE_FAILURE: int = ...
    DELETED: int = ...
    FORCED_UPDATE: int = ...
    FAST_FORWARD: int = ...
    UP_TO_DATE: int = ...
    ERROR: int = ...
    flags: int = ...
    local_ref: SymbolicReference = ...
    remote_ref_string: str = ...
    summary: str = ...
    def __init__(self, flags: int, local_ref: SymbolicReference, remote_ref_string: str, remote: Remote, old_commit: Optional[str] = ..., summary: str = ...) -> None: ...
    @property
    def old_commit(self) -> Optional[str]: ...
    @property
    def remote_ref(self) -> Union[TagReference, RemoteReference]: ...

class FetchInfo:
    NEW_TAG: int = ...
    NEW_HEAD: int = ...
    HEAD_UPTODATE: int = ...
    TAG_UPDATE: int = ...
    REJECTED: int = ...
    FORCED_UPDATE: int = ...
    FAST_FORWARD: int = ...
    ERROR: int = ...
    @classmethod
    def refresh(cls) -> Literal[True]: ...
    ref: Reference = ...
    flags: int = ...
    note: str = ...
    old_commit: Optional[Object] = ...
    remote_ref_path: Any = ...
    def __init__(self, ref: Reference, flags: int, note: str = ..., old_commit: Optional[Object] = ..., remote_ref_path: Optional[str] = ...) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def commit(self) -> Commit: ...

class Remote(LazyMixin, Iterable):
    repo: Repo = ...
    name: str = ...
    def __init__(self, repo: Repo, name: str) -> None: ...
    def __getattr__(self, attr: str) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def exists(self) -> bool: ...
    @classmethod
    def iter_items(cls, repo: Repo) -> Iterator[Remote]: ...
    def set_url(self, new_url: str, old_url: Optional[str] = ..., **kwargs: Any) -> Remote: ...
    def add_url(self, url: str, **kwargs: Any) -> Remote: ...
    def delete_url(self, url: str, **kwargs: Any) -> Remote: ...
    @property
    def urls(self) -> Iterator[str]: ...
    @property
    def refs(self) -> IterableList[SymbolicReference]: ...
    @property
    def stale_refs(self) -> IterableList[SymbolicReference]: ...
    @classmethod
    def create(cls, repo: Repo, name: str, url: str, **kwargs: Any) -> Remote: ...
    add = create
    @classmethod
    def remove(cls, repo: Repo, name: str) -> str: ...
    rm = remove
    def rename(self, new_name: str) -> Remote: ...
    def update(self, **kwargs: Any) -> Remote: ...
    def fetch(self, refspec: Optional[Union[List[str], str]] = ..., progress: Optional[_ProgressReporter] = ..., verbose: bool = ..., **kwargs: Any) -> IterableList[FetchInfo]: ...
    def pull(self, refspec: Optional[Union[List[str], str]] = ..., progress: Optional[_ProgressReporter] = ..., **kwargs: Any) -> IterableList[FetchInfo]: ...
    def push(self, refspec: Optional[Union[List[str], str]] = ..., progress: Optional[_ProgressReporter] = ..., **kwargs: Any) -> IterableList[PushInfo]: ...
    @property
    def config_reader(self) -> GitConfigParser: ...
    @property
    def config_writer(self) -> GitConfigParser: ...
