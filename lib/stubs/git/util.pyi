import logging
from typing import Any, AnyStr, BinaryIO, Callable, Dict, IO, List, Optional, Pattern, TypedDict, TypeVar, Union, Iterator, Generic
from pathlib import Path

from .config import GitConfigParser

HIDE_WINDOWS_KNOWN_ERRORS: bool

_Ft = TypeVar('_Ft')
_V = TypeVar('_V')
_PathType = Union[str, bytes, Path]

def unbare_repo(func: _Ft) -> _Ft: ...
def rmtree(path: _PathType) -> None: ...
def stream_copy(source: BinaryIO, destination: BinaryIO, chunk_size: int = ...) -> int: ...
def join_path(a: str, *p: str) -> str: ...
def to_native_path_windows(path: str) -> str: ...
def to_native_path_linux(path: str) -> str: ...
to_native_path = to_native_path_windows
to_native_path = to_native_path_linux

def join_path_native(a: str, *p: str) -> str: ...
def assure_directory_exists(path: str, is_file: bool = ...) -> bool: ...
def get_user_id() -> str: ...

class RemoteProgress:
    BEGIN: int = ...
    END: int = ...
    COUNTING: int = ...
    COMPRESSING: int = ...
    WRITING: int = ...
    RECEIVING: int = ...
    RESOLVING: int = ...
    FINDING_SOURCES: int = ...
    CHECKING_OUT: int = ...
    STAGE_MASK: int = ...
    OP_MASK: int = ...
    DONE_TOKEN: str = ...
    TOKEN_SEPARATOR: str = ...
    re_op_absolute: Pattern[str] = ...
    re_op_relative: Pattern[str] = ...
    error_lines: List[str] = ...
    other_lines: List[str] = ...
    def __init__(self) -> None: ...
    def new_message_handler(self) -> Callable[[str], None]: ...
    def line_dropped(self, line: str) -> None: ...
    def update(self, op_code: int, cur_count: int, max_count: Optional[int] = ..., message: str = ...) -> None: ...

class CallableRemoteProgress(RemoteProgress):
    def __init__(self, fn: Callable[[int, int, Optional[int], str], None]) -> None: ...
    def update(self, op_code: int, cur_count: int, max_count: Optional[int] = ..., message: str = ...) -> None: ...

class Actor:
    name_only_regex: Pattern[str] = ...
    name_email_regex: Pattern[str] = ...
    env_author_name: str = ...
    env_author_email: str = ...
    env_committer_name: str = ...
    env_committer_email: str = ...
    conf_name: str = ...
    conf_email: str = ...
    name: str = ...
    email: str = ...
    def __init__(self, name: str, email: str) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @classmethod
    def committer(cls, config_reader: Optional[GitConfigParser] = ...) -> Actor: ...
    @classmethod
    def author(cls, config_reader: Optional[GitConfigParser] = ...) -> Actor: ...


class StatDict(TypedDict):
    insertions: int
    deletions: int
    lines: int


class FullStatDict(StatDict):
    files: int


class Stats:
    total: FullStatDict = ...
    files: Dict[str, StatDict] = ...
    def __init__(self, total: FullStatDict, files: Dict[str, StatDict]) -> None: ...
    @classmethod
    def _list_from_string(cls, repo: Any, text: str) -> 'Stats': ...

class IndexFileSHA1Writer:
    f: Any = ...
    sha1: Any = ...
    def __init__(self, f: IO[AnyStr]) -> None: ...
    def write(self, data: AnyStr) -> int: ...
    def write_sha(self) -> bytes: ...
    def close(self) -> bytes: ...
    def tell(self) -> int: ...

class LockFile:
    def __init__(self, file_path: str) -> None: ...
    def __del__(self) -> None: ...

class BlockingLockFile(LockFile):
    def __init__(self, file_path: str, check_interval_s: float = ..., max_block_time_s: int = ...) -> None: ...

class IterableList(List[_V]):
    def __new__(cls, id_attr: str, prefix: str = ...) -> IterableList[_V]: ...
    def __init__(self, id_attr: str, prefix: str = ...) -> None: ...
    def __contains__(self, attr: Union[str, _V]) -> bool: ...  # type: ignore
    def __getattr__(self, attr: str) -> _V: ...
    def __getitem__(self, index: Union[int, str, slice]) -> _V: ...  # type: ignore
    def __delitem__(self, index: Union[int, str, slice]) -> None: ...

class Iterable:
    @classmethod
    def list_items(cls: _V, repo: Any) -> IterableList[_V]: ...
    @classmethod
    def iter_items(cls: _V, repo: Any) -> Iterator[_V]: ...

class NullHandler(logging.Handler):
    def emit(self, record: Any) -> None: ...


# From gitdb.util
class LazyMixin:
    ...
