from __future__ import annotations

from typing import Generic, Iterable, Iterator, Literal, Sequence, overload

from networkx._types import EdgeAttrT, GraphAttrT, NodeT


class Graph(Generic[NodeT, GraphAttrT, EdgeAttrT]):
    graph: dict[str, GraphAttrT]

    def __iter__(self) -> Iterator[NodeT]: ...
    def __contains__(self, n: NodeT) -> bool: ...
    def __len__(self) -> int: ...
    def add_node(self, node_for_adding: NodeT, **attr: str) -> None: ...
    def add_nodes_from(
        self,
        nodes_for_adding: Iterable[NodeT] | Iterable[tuple[NodeT, dict[str, str]]],
        **attr: str,
    ) -> None: ...
    @overload
    def nodes(self) -> Iterator[NodeT]: ...
    @overload
    def nodes(self, data: Literal[True]) -> Iterator[tuple[NodeT, dict[str, str]]]: ...
    def number_of_nodes(self) -> int: ...
    def order(self) -> int: ...
    @overload
    def number_of_edges(self) -> int: ...
    @overload
    def number_of_edges(self, u: NodeT, v: NodeT) -> int: ...
