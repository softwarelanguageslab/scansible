from typing import Any, Mapping, Sequence, overload, Literal
from .graph import NodeT, EdgeAttrT, GraphAttrT
from .digraph import DiGraph
from .multigraph import MultiGraph

class MultiDiGraph(MultiGraph[NodeT, GraphAttrT, EdgeAttrT], DiGraph[NodeT, GraphAttrT, EdgeAttrT]):
    # edge_key_dict_factory: Incomplete
    def __init__(self, incoming_graph_data: Any | None = ..., multigraph_input: Any | None = ..., **attr: GraphAttrT) -> None: ...
    def __getitem__(self, u: NodeT) -> Mapping[NodeT, Mapping[int, Mapping[str, EdgeAttrT]]]: ...
    # def adj(self): ...
    # def succ(self): ...
    # def pred(self): ...
    def add_edge(self, u_for_edge: NodeT, v_for_edge: NodeT, key: int | None = ..., **attr: EdgeAttrT) -> int: ...
    # def remove_edge(self, u, v, key: Incomplete | None = ...) -> None: ...
    @overload
    def edges(self) -> Sequence[tuple[NodeT, NodeT]]: ...
    @overload
    def edges(self, data: Literal[True]) -> Sequence[tuple[NodeT, NodeT, Mapping[str, EdgeAttrT]]]: ...
    # TODO: More overloads
    # def out_edges(self): ...
    # def in_edges(self): ...
    # def degree(self): ...
    # def in_degree(self): ...
    # def out_degree(self): ...
    # def is_multigraph(self): ...
    # def is_directed(self): ...
    # def to_undirected(self, reciprocal: bool = ..., as_view: bool = ...): ...
    # def reverse(self, copy: bool = ...): ...
