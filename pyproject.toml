[project]
name = "scansible"
version = "0.1.2"
description = "Static Analysis Framework for Ansible"
authors = [{ name = "Ruben Opdebeeck", email = "ropdebee@vub.be" }]
requires-python = "~=3.11"
dependencies = [
    "networkx>=2.5.1,<3",
    "click>=8.1.3,<9",
    "pydantic>=2.11.7,<3",
    "loguru>=0.6.0,<0.7",
    "attrs>=22.1.0,<23",
    "Jinja2>=3.1.2,<4",
    "attrs-strict>=1.0.0,<2",
    "rich==13.4.2",
    "graphviz>=0.20.1,<0.21",
    "MarkupSafe==2.0.1",
    "pyyaml>=6.0.1,<7",
    "requests>=2.32.3,<3",
    "ansible-core<3",
    "ansible", # Needed for collections.
    "kuzu>=0.10.0",
]

[project.scripts]
scansible = "scansible:cli"

[dependency-groups]
dev = [
    "hypothesis>=6.17.0,<7",
    "types-PyYAML>=6.0.12.1,<7",
    "pytest>=7.2.0,<8",
    "pytest-describe>=2.0.1,<3",
    "coverage>=6.5.0,<7",
    "pytest-cov>=4.0.0,<5",
    "pytest-mock>=3.10.0,<4",
    "types-redis>=4.3.21.6,<5",
    "ruff>=0.11.13,<0.12",
    "basedpyright>=1.29.4",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff.lint]
extend-select = ["I"]

[tool.ruff.lint.per-file-ignores]
"**/tests/*" = ["D", "INP001", "S101", "PLR2004", "FBT001"]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
section-order = ["future", "typing", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
typing = ["typing", "typing_extension"]

[tool.pyright]
stubPath = "./lib/stubs"
typeCheckingMode = "recommended"
useLibraryCodeForTypes = true
reportImportCycles = "none"

[tool.pytest.ini_options]
addopts = "--cov=. --cov-report html"
markers = [
    "slow: marks tests as slow (run with --slow)",
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "^\\s*if TYPE_CHECKING:",
    "@overload",
    "^\\s*\\.\\.\\.$",
    "raise NotImplementedError\\(",
    "raise TypeError\\(",
    "raise ValueError\\(",
    "raise RuntimeError\\(",
    "@pytest\\.mark\\.xfail",
    "@pytest\\.mark\\.integration",
    "@pytest\\.mark\\.smoke",
    "def __repr__\\(",
]
